#!/bin/bash
### search for a squashfs module and download ###
### fredx181 2016-12-07 search is much faster, elinks scans releases dir in one step now
 
.  /usr/local/sfsget/script/functions 

RESTART=$0
TITLE="SFS Downloader"
TEXT=" Search the repository for a .squashfs module "
TEXT1="             <b>Downloads</b> in progress:"        # dialog text
ICON="browserdload"                     # window icon (appears in launcher)
IMAGE="browserdload"

## search gui ##
GUI=$(yad --image="application-x-squashfs" --image-on-top --center --title="$TITLE" --text="$TEXT  " --form \
--field="Search" \
--button="gtk-go-back:1"  --button="gtk-ok:0" )
button=$?
case $button in

1) 
  echo "Exiting" && exit  
;; 
 
0)
## if no search string restart ##
 search=` echo $GUI | cut -d '|' -f1 `
 if [[ ! -n "$search" ]]; then 
 echo "no search string entered" && $RESTART && exit
 fi

# if searched for more than one word
for i in $search; do
#SRCH="$SRCH\|$i"
SRCH="$SRCH""(?=.*"$i")" # (search for ... and ...)
done
#SRCH=$(echo "$SRCH" | sed "s#^[\]|##")
# echo $SRCH

## display searched modules ##

export HOSTDIR="https://github.com/DebianDog/SFSget/releases/"
MODULES=$(elinks -dump "$HOSTDIR" | grep 'releases/download/' | awk '/https/{print $2}')
SEARCHLIST=$(echo $MODULES | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
#echo "$SEARCHLIST"
ALLITEMS=$(echo "$SEARCHLIST"  | awk '{print $2}' | grep -Pih ^"$SRCH")
#echo $ALLITEMS
# ALL=$(while read line; do echo application-x-squashfs $line |grep -i "$ALLITEMS"; done <<< "$(echo "$SEARCHLIST")")
ALL=$(
while read line; do
[ "$(basename $(echo $line | awk '{print $1}'))" = "Desktop" ] && ICON=/usr/local/sfsget/icon/harddrive48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "Document" ] && ICON=/usr/local/sfsget/icon/edit48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "Filesystem" ] && ICON=/usr/local/sfsget/icon/drive_mntd48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "Fun" ] && ICON=/usr/local/sfsget/icon/games48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "Graphics" ] && ICON=/usr/local/sfsget/icon/paint48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "Internet" ] && ICON=/usr/local/sfsget/icon/www48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "Multimedia" ] && ICON=/usr/local/sfsget/icon/multimedia48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "Network" ] && ICON=/usr/local/sfsget/icon/connect48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "System" ] && ICON=/usr/local/sfsget/icon/configuration48_28x28.png
[ "$(basename $(echo $line | awk '{print $1}'))" = "Utility" ] && ICON=/usr/local/sfsget/icon/utility48_28x28.png
echo $ICON $line |grep -i "$ALLITEMS";
done <<< "$(echo "$SEARCHLIST")"
)

TEXT2="    Search results for <b>$search</b> \n Download SFS modules (.squashfs or .sfs). \n Select (multiple) items to download. " 
[ -z "$ALLITEMS" ] && ALL="" && TEXT2=" <b>Sorry, no results for '$search'</b> "

GUI1=$(yad --separator=" " --image="application-x-squashfs" --image-on-top --window-icon="application-x-squashfs" --center --height 500 --width="500" --list --title="Download SFS module" --multiple --text=" $TEXT2 " --column="     :IMG" --column " Available Modules" $ALL --column Name --hide-column=2 --button="gtk-go-back:1"  --button="gtk-ok:0")
button1=$?
echo $GUI1
case $button1 in

1) 
  echo "Exiting" && exit  
;; 

0)
## if package selected then download - else restart ##
 if [[ -n "$GUI1" ]]; then
if [ ! -w $BASE ]; then
echo "It seems that $BASE is on read-only media, booting from CD maybe?"
BASE=/root
fi
# Select folder to download to:
SAVEFOLDER=$(yad  --center --image="application-x-squashfs" --image-on-top --title="Select folder to download SFS modules" --file --filename "$BASE" --directory --height=600 --width=800 --text=" Select folder to download SFS modules to" )
ret=$?
[[ $ret -ne 0 ]] && exit 1

URILIST="`echo "$GUI1" | rev | sed 's| |/|2' | rev | tr '\n' ' '`"

# Select folder to download to:
#SAVEFOLDER=$(yad  --center --image="browser-dload" --image-on-top --title="Select target folder" --file --height=600 --width=800 --text=" Select target folder for downloads" )
#ret=$?
#[[ $ret -ne 0 ]] && exit 1

MAXDLS="5" # set maximum number of simultaneous downloads

# download file and extract progress, speed and ETA from wget
# we use sed regex for this
# source: http://ubuntuforums.org/showthread.php?t=306515&page=2&p=7455412#post7455412
# modified to work with different locales and decimal point conventions
download(){
    cd "$SAVEFOLDER"
    wget --no-check-certificate "$1" 2>&1 | sed -u \
    "s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:# Downloading at \2\/s, ETA \3/"
    RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
    if [[ "$RET_WGET" = 0 ]]                # check return code for errors
      then
          echo "$2:100%"
          echo "$2:#Download completed."
      else
          echo "$2:#Download error."
    fi
}


# compose list of bars for yad
for URI in $URILIST; do                     # iterate through all URIs
    FILENAME="${URI##*/}"                   # extract last field of URI as filename
    YADBARS="$YADBARS --bar=$FILENAME:NORM" # add filename to the list of URIs
done

IFS=" "
COUNTER="1"
DYNAMIC_COUNTER="1"

# main
# iterate through all URIs, download them in the background and 
# pipe all output simultaneously to yad
# source: http://pastebin.com/yBL2wjaY

for URI in $URILIST; do
    if [[ "$DYNAMIC_COUNTER" = "$MAXDLS" ]] # only download n files at a time
      then
          download "$URI" "$COUNTER"        # if limit reached wait until wget complete
          DYNAMIC_COUNTER="1"               # before proceeding (by not sending download() to bg)
      else
          download "$URI" "$COUNTER" &      # pass URI and URI number to download()
          DYNAMIC_COUNTER="$[$DYNAMIC_COUNTER+1]"
    fi
    COUNTER="$[$COUNTER+1]"                 # increment counter
done | yad --center --multi-progress --on-top --auto-kill $YADBARS --title "$TITLE" \
--text "$TEXT1" --window-icon "$ICON" --image "$IMAGE"

# launch yad multi progress-bar window

  else
  echo "No package selected" && unset ALL && $RESTART && exit
 fi
;;
esac
esac






